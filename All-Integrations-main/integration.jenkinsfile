node('built-in'){
 stage('parameters'){
 properties([
 parameters([
            choice(choices:['1','2','3'],description:'duration to run',name:'jenkins_pipeline')
        ])
        ])
        }
    stage('Cleanup and clone'){
           
            deleteDir()
             git branch:'main', url: 'https://github.com/linux-devops123/All-Integrations.git', credentialsId:'jenkins-git-integration'
            echo "done"
        }
       
        withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_jenkins',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'

                ]])
       {
       
         stage("start rds database")
        {
                script{
                   def db = "database-1"
                    
                    def dbstatus = sh(returnStdout:true, script:"aws rds describe-db-instances --db-instance-identifier ${db} --query 'DBInstances[].DBInstanceStatus[]' --output text")
                    echo "${dbstatus}".trim();
                    if("${dbstatus}".trim() == "stopped")
                    {
                     def rds= sh(returnstdout:true,script:"aws rds start-db-instance --db-instance-identifier database-1")
                    echo "${rds}"
                    }
                    def endpoint = sh(returnStdout:true, script: "aws rds describe-db-instances --query 'DBInstances[*].Endpoint.Address'")
                    echo "${endpoint}".trim();
                    sleep(100)
                }
            
        }
        
         stage("start servers"){
            
                script{
                 
                ['ubuntu-server','aws-cloud9-Dynamodb','aws-cloud9-dynamolab'].each
                {
                echo "${it}"
            /* using aws cli commmands to start, stop,list the servers
            cmd to list instance id , type,name
            jq=is json processor to provide output in json
            */
             def InstanceId = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=${it}' 'Name=instance-state-name, Values=stopped' | jq -r '.Reservations[].Instances[].InstanceId'")
                echo "${InstanceId}"
            def InstanceState = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=${it}' 'Name=instance-state-name, Values=stopped' | jq -r '.Reservations[].Instances[].State.Name'")
                echo "${InstanceState}"
                if("${InstanceState}".trim() == "stopped")
                {
                    sh "aws ec2 start-instances --instance-ids ${InstanceId}"
                }
                }
          sleep(10);
          }
          }
         
        
         stage('Packer')
        {
            dir('packer')
            {
                sh"""
                #!/bin/bash
              
                packer build -var-file windows-packer/packer1_vars.json windows-packer/packer1.json
                """
                sleep(100)
            }
        }
         stage('packer-terraform')
        {
            dir('packer/Terraform+Packer')
            {
                sh"""
               terraform init
               terraform apply -auto-approve
                """
                def data = sh(returnStdout:true, script: "terraform output name")
                echo "${data}"
                sleep(200);
            }
        }
        stage('Terraform')
        {
        dir('Terraform/network-security'){
        sh"""
        terraform init
        terraform apply -auto-approve
        """
        sleep(200);
    }
    dir('Terraform/linux')
    {
       sh"""
        terraform init
        terraform apply -auto-approve
        """
        def data1 = sh(returnStdout:true, script: "terraform output ips")
        echo "${data1}" 
        sleep(200);
    }
    dir('Terraform/terragrunt')
    {
        sh"""
        terragrunt init 
        terragrunt apply -auto-approve
        """
        def data3 = sh(returnStdout:true, script: "terragrunt output awsinstanceid")
        echo "${data3}"
        sleep(200);
    }
        }
        
       
        
        stage('Ansible with aws cli')
        {
        
         dir('ansible/terraform/windows')
            {
                
                    sh"""
                    terraform init
                    terraform apply -auto-approve

                    """
                    sleep(100);
                
            }
             def InstanceState = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=Windows+Ansible' 'Name=instance-state-name, Values=running' | jq -r '.Reservations[].Instances[].State.Name'")
      echo "${InstanceState}"
      
      def InstanceId = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=Windows+Ansible' 'Name=instance-state-name, Values=running' | jq -r '.Reservations[].Instances[].InstanceId'")
       echo "${InstanceId}"
          
       def ip = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=Windows+Ansible' 'Name=instance-state-name, Values=running' | jq -r '.Reservations[].Instances[].PublicIpAddress'") 
      def ipg = "${ip}".replaceAll("[\n\r]",",")
     echo "${ipg}"
     def ip1 = "${ip}".substring(0,"${ipg}".indexOf(','))    
      echo "${ip1}".trim()
       def ip2 = "${ipg}".substring("${ipg}".indexOf(','),"${ipg}".length()).replaceAll(',','');
      echo "${ip2}".trim()
     
               dir('ansible'){
                    ansiblePlaybook(colorized:true,inventory:'terraform/windows/hosts.ini',playbook:'WindowsServer/files.yaml',extraVars:["exe":"C:\\batfile\\exes.bat","path":"C:\\cred.txt","serverip":"${ip1}"])
                
            }
            dir('ansible'){
                    ansiblePlaybook(colorized:true,inventory:'terraform/windows/hosts.ini',playbook:'WindowsServer/files.yaml',extraVars:["exe":"C:\\batfile\\exes.bat","path":"C:\\cred.txt","serverip":"${ip2}"])
                
            }
            
      dir('ansible')
            {
               ansiblePlaybook(colorized:true,inventory:'terraform/windows/hosts.ini',playbook:'EC2-Instances/start.yaml',
                    extraVars:["instance_ids":"i-0c271182bd38cb02e", "instance_ids":"i-04becc83b635f4229"],credentialsId:'aws_jenkins')
                    sleep(100);
            ansiblePlaybook(colorized:true,inventory:'terraform/windows/hosts.ini',playbook:'EC2-Instances/restart.yaml',
                    extraVars:["instance_ids":"i-0c271182bd38cb02e", "instance_ids":"i-04becc83b635f4229"],credentialsId:'aws_jenkins') 
                    
          ansiblePlaybook(colorized:true,inventory:'terraform/windows/hosts.ini',playbook:'EC2-Instances/stop.yaml',
                    extraVars:["instance_ids":"i-0c271182bd38cb02e", "instance_ids":"i-04becc83b635f4229"],credentialsId:'aws_jenkins') 
                    sleep(100);
         ansiblePlaybook(colorized:true,inventory:'terraform/windows/hosts.ini',playbook:'AWSInfrastructureAnsible/ec2-ansible.yaml', credentialsId:'aws_jenkins')
         sleep(100);
          ansiblePlaybook(colorized:true,inventory:'terraform/windows/hosts.ini',playbook:'AWSInfrastructureAnsible/s3.yaml', credentialsId:'aws_jenkins')
         sleep(100);    
            }
        }
        
          stage("stop servers"){
            
                script{
                 
                ['ubuntu-server','aws-cloud9-Dynamodb','aws-cloud9-dynamolab'].each
                {
                echo "${it}"
            /* using aws cli commmands to start, stop,list the servers
            cmd to list instance id , type,name
            jq=is json processor to provide output in json
            */
             def InstanceId = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=${it}' 'Name=instance-state-name, Values=running' | jq -r '.Reservations[].Instances[].InstanceId'")
                echo "${InstanceId}"
            def InstanceState = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=${it}' 'Name=instance-state-name, Values=running' | jq -r '.Reservations[].Instances[].State.Name'")
                echo "${InstanceState}"
                if("${InstanceState}".trim() == "running")
                {
                    sh "aws ec2 stop-instances --instance-ids ${InstanceId}"
                }
                }
          sleep(10);
          }
          
          }
         
            stage("stop rds database")
        {
                script{
                    
                    def dbstatus = sh(returnStdout:true, script:"aws rds describe-db-instances --db-instance-identifier ${db} --query 'DBInstances[].DBInstanceStatus[]' --output text")
                    echo "${dbstatus}".trim();
                    if("${dbstatus}".trim() == "available")
                    {
                     def rds= sh(returnstdout:true,script:"aws rds stop-db-instance --db-instance-identifier database-1")
                    echo "${rds}"
                    }
                    def endpoint = sh(returnStdout:true, script: "aws rds describe-db-instances --query 'DBInstances[*].Endpoint.Address'")
                    echo "${endpoint}".trim();
                    sleep(100);
                }
            
        }
        }
       }




