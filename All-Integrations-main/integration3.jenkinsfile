//linux server integration
//to check the exe is running or not-check in linux putty thrrough px aux
//also this is a linux server so use disableHostKeyChecking:true in jenkins for ansible
//for creating terraform ubuntu and passing the ip address in inventory file, we need vpn so that we can access through private ip
node('built-in'){
 stage('parameters'){
 properties([
 parameters([
            choice(choices:['1','2','3'],description:'duration to run',name:'jenkins_pipeline')
        ])
        ])
        }
    stage('Cleanup and clone'){
           
            deleteDir()
             git branch:'main', url: 'https://github.com/linux-devops123/All-Integrations.git', credentialsId:'jenkins-git-integration'
            echo "done"
        }
       
        withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_jenkins',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'

                ]])
       {
       
        stage("start rds database")
        {
                script{
                   def db = "database-1"
                    
                    def dbstatus = sh(returnStdout:true, script:"aws rds describe-db-instances --db-instance-identifier ${db} --query 'DBInstances[].DBInstanceStatus[]' --output text")
                    echo "${dbstatus}".trim();
                    if("${dbstatus}".trim() == "stopped")
                    {
                     def rds= sh(returnstdout:true,script:"aws rds start-db-instance --db-instance-identifier database-1")
                    echo "${rds}"
                     sleep(300)
                    }
                    def endpoint = sh(returnStdout:true, script: "aws rds describe-db-instances --query 'DBInstances[*].Endpoint.Address'")
                    echo "${endpoint}".trim();
                   
                }
            
        }
        
        stage('Packer')
        {
            dir('packer')
            {
                sh"""
                #!/bin/bash
              
                packer build -var-file linux-packer/linux_vars.json linux-packer/linux.json
                """
                sleep(100)
            }
        }
     
         stage('packer-terraform')
        {
            dir('packer/Terraform+Packer')
            {
                sh"""
               terraform init
               terraform apply -auto-approve
                """
                def data = sh(returnStdout:true, script: "terraform output name")
                echo "${data}"
                sleep(100);
            }
        }
           
        stage('ansible and aws cli')
        {
            def InstanceState = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=TerraformPacker' 'Name=instance-state-name, Values=running' | jq -r '.Reservations[].Instances[].State.Name'")
      echo "${InstanceState}"
      
      def InstanceId = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=TerraformPacker' 'Name=instance-state-name, Values=running' | jq -r '.Reservations[].Instances[].InstanceId'")
       echo "${InstanceId}"
          
       def ip = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=TerraformPacker' 'Name=instance-state-name, Values=running' | jq -r '.Reservations[].Instances[].PublicIpAddress'") 
       
      def ip1= "${ip}".trim()
           dir('ansible'){
                    ansiblePlaybook(colorized:true,installation:'ansible',disableHostKeyChecking:true,playbook:'playbooks/linux-software.yaml',inventory:"${ip1},")
                
            }  
        }
        
         stage('packer-terraform-destroy')
        {
            dir('packer/Terraform+Packer')
            {
                sh"""
               terraform init
               terraform destroy -auto-approve
                """
                def data = sh(returnStdout:true, script: "terraform output name")
                echo "${data}"
               
            }
        }
            stage("stop rds database")
        {
                script{
                    
                    def dbstatus = sh(returnStdout:true, script:"aws rds describe-db-instances --db-instance-identifier ${db} --query 'DBInstances[].DBInstanceStatus[]' --output text")
                    echo "${dbstatus}".trim();
                    if("${dbstatus}".trim() == "available")
                    {
                     def rds= sh(returnstdout:true,script:"aws rds stop-db-instance --db-instance-identifier database-1")
                    echo "${rds}"
                    }
                    def endpoint = sh(returnStdout:true, script: "aws rds describe-db-instances --query 'DBInstances[*].Endpoint.Address'")
                    echo "${endpoint}".trim();
                 
                }
            
        }               
        
       }
}
