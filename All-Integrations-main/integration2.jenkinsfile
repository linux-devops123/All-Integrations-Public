node('built-in'){
 stage('parameters'){
 properties([
 parameters([
            choice(choices:['1','2','3'],description:'duration to run',name:'jenkins_pipeline')
        ])
        ])
        }
         stage('Cleanup and clone'){
           
            deleteDir()
             git branch:'main', url: 'https://github.com/linux-devops123/All-Integrations.git', credentialsId:'jenkins-git-integration'
            echo "done"
        }
         withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws_jenkins',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'

                ]])
       {
       
      stage("start rds database")
        {
                script{
                   def db = "database-1"
                    
                    def dbstatus = sh(returnStdout:true, script:"aws rds describe-db-instances --db-instance-identifier ${db} --query 'DBInstances[].DBInstanceStatus[]' --output text")
                    echo "${dbstatus}".trim();
                    if("${dbstatus}".trim() == "stopped")
                    {
                     def rds= sh(returnstdout:true,script:"aws rds start-db-instance --db-instance-identifier database-1")
                    echo "${rds}"
                    }
                    def endpoint = sh(returnStdout:true, script: "aws rds describe-db-instances --query 'DBInstances[*].Endpoint.Address'")
                    echo "${endpoint}".trim();
                    sleep(100)
                }
            
        }
        
   stage('Terraform+ANSIBLE')
        {
        
        dir('ansible/terraform/windows')
            {
                
                    sh"""
                    terraform init
                    terraform apply -auto-approve

                    """
                    sleep(100);
                
            }
        
        }
     
        stage('check aws cli and ansible')
       {
      def InstanceState = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=Windows+Ansible' 'Name=instance-state-name, Values=running' | jq -r '.Reservations[].Instances[].State.Name'")
      echo "${InstanceState}"
      
      def InstanceId = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=Windows+Ansible' 'Name=instance-state-name, Values=running' | jq -r '.Reservations[].Instances[].InstanceId'")
       echo "${InstanceId}"
          
       def ip = sh(returnStdout:true, script:"aws ec2 describe-instances --filters 'Name=tag-value, Values=Windows+Ansible' 'Name=instance-state-name, Values=running' | jq -r '.Reservations[].Instances[].PublicIpAddress'") 
      def ipg = "${ip}".replaceAll("[\n\r]",",")
     echo "${ipg}"
     def ip1 = "${ip}".substring(0,"${ipg}".indexOf(','))    
      echo "${ip1}".trim()
       def ip2 = "${ipg}".substring("${ipg}".indexOf(','),"${ipg}".length()).replaceAll(',','');
      echo "${ip2}".trim()
     
    
    
    dir('ansible'){
                    ansiblePlaybook(colorized:true,inventory:'terraform/windows/hosts.ini',playbook:'WindowsServer/files.yaml',extraVars:["exe":"C:\\batfile\\exes.bat","path":"C:\\cred.txt","serverip":"${ip1}"])
                
            }
            dir('ansible'){
                    ansiblePlaybook(colorized:true,inventory:'terraform/windows/hosts.ini',playbook:'WindowsServer/files.yaml',extraVars:["exe":"C:\\batfile\\exes.bat","path":"C:\\cred.txt","serverip":"${ip2}"])
                
            }
            sleep(600);
      }
    
     stage('Terraform+ANSIBLE destroy')
        {
        
        dir('ansible/terraform/windows')
            {
                
                    sh"""
                    terraform init
                    terraform destroy -auto-approve

                    """
                   
                
            }
        
        }
         stage("stop rds database")
        {
                script{
                    
                    def dbstatus = sh(returnStdout:true, script:"aws rds describe-db-instances --db-instance-identifier ${db} --query 'DBInstances[].DBInstanceStatus[]' --output text")
                    echo "${dbstatus}".trim();
                    if("${dbstatus}".trim() == "available")
                    {
                     def rds= sh(returnstdout:true,script:"aws rds stop-db-instance --db-instance-identifier database-1")
                    echo "${rds}"
                    }
                    def endpoint = sh(returnStdout:true, script: "aws rds describe-db-instances --query 'DBInstances[*].Endpoint.Address'")
                    echo "${endpoint}".trim();
                    sleep(100);
                }
            
        }
       }
        }
